{
  "info": {
    "_postman_id": "3c2f200e-b335-4220-b0cd-dc23c58cc06d",
    "name": "Clinic REST testing",
    "description": "# ‚õìÔ∏è Get started here\n\nPostman allows you to test your APIs using simple Javascript code. You can evaluate your response body, headers, cookies, and more using the [ChaiJS BDD](https://www.chaijs.com/api/bdd/) syntax.\n\nThis template guides you through the process of setting up an integration test to ensure that all individual components of an API function together seamlessly.\n\nThe API under test in this collection includes three endpoints for registering and receiving a token, accessing your unique generated name, and unregistering a token:\n\n- POST `/register`\n- POST `/unregister`\n- GET `/my-name`\n    \n\nBy setting up requests in the order of the operation, we can test the flow of data to and from the endpoints and ensure they work together as expected. We also verify that the data persists between requests on the back end.\n\n## üîñ **How to use this template**\n\n**Step 1:** Check out the requests' documentation to learn more about -\n\n- what each request is meant to do.\n- the tests we've added against each one.\n    \n\n**Step 2:** Run this collection by clicking on \"Run\".\n\n<img src=\"https://content.pstmn.io/84019b0f-69c8-4c5f-98b9-2c90a6f9a0b1/Y29sbGVjdGlvbi1ydW5uZXItYnV0dG9uLmpwZWc=\" alt=\"\" height=\"103\" width=\"266\">\n\n**Step 3:** To customize this template, replace the request URLs with your API endpoints and add or edit the tests if needed.\n\n## ‚ÑπÔ∏è Resources\n\n[Scripting in Postman](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/)\n\n[Test script examples](https://learning.postman.com/docs/writing-scripts/script-references/test-examples/)\n\n[Postman Sandbox API reference](https://learning.postman.com/docs/sending-requests/grpc/postman-sandbox-api/#writing-assertions)\n\n[Using the Collection Runner](https://learning.postman.com/docs/collections/running-collections/intro-to-collection-runs/)",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "5634546"
  },
  "item": [
    {
      "name": "Auth",
      "item": [
        {
          "name": "Doctor login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\":\"doctorName@test.com\",\n    \"password\":\"abc\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/doctor-login",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "auth",
                "doctor-login"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Patient login",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\":\"patientName@test.com\",\n    \"password\":\"abc\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/patient-login",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "auth",
                "patient-login"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Patient",
      "item": [
        {
          "name": "Register Patient",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"An access token is returned\", () => {",
                  "    pm.expect(pm.response.json()).to.have.property('token')",
                  "    pm.expect(pm.response.json().token).to.be.a('string')",
                  "    // Set the collection-scope \"token\" variable to the token received from the API",
                  "    // This lets us use it in other requests",
                  "    pm.collectionVariables.set('token', pm.response.json().token)",
                  "})",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJkb2N0b3JOYW1lQHRlc3QuY29tIiwiaWF0IjoxNzI2MzkxMzU3LCJyb2xlcyI6WyJET0NUT1JfUk9MRSJdLCJleHAiOjE3MjY0Nzc3NTcsImFjdG9ySWQiOjJ9.fuHxdjuDy8jxxwYEcIji_Pn0WxLob3O4xfyfXCn3Law",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"firstName\":\"Patient\",\n    \"lastName\":\"Name\",\n    \"email\":\"patientName@test.com\",\n    \"password\":\"abc\",\n    \"objectType\":\"patient\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/patient/register",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "patient",
                "register"
              ]
            },
            "description": "This returns a `token` that you can use to retrieve information later on.\n\nWe have included a test to confirm if a token is returned. We have also added test scripts to copy the token to the `token` collection variable. This makes it easy for us to reuse this token in other requests in the collection."
          },
          "response": []
        },
        {
          "name": "Get Patient By Id",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"An access token is returned\", () => {",
                  "    pm.expect(pm.response.json()).to.have.property('token')",
                  "    pm.expect(pm.response.json().token).to.be.a('string')",
                  "    // Set the collection-scope \"token\" variable to the token received from the API",
                  "    // This lets us use it in other requests",
                  "    pm.collectionVariables.set('token', pm.response.json().token)",
                  "})",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJkb2N0b3JOYW1lQHRlc3QuY29tIiwiaWF0IjoxNzI2MzkxMzU3LCJyb2xlcyI6WyJET0NUT1JfUk9MRSJdLCJleHAiOjE3MjY0Nzc3NTcsImFjdG9ySWQiOjJ9.fuHxdjuDy8jxxwYEcIji_Pn0WxLob3O4xfyfXCn3Law",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"firstName\":\"Patient\",\n    \"lastName\":\"Name\",\n    \"email\":\"patientName@test.com\",\n    \"password\":\"abc\",\n    \"objectType\":\"patient\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/patient/3",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "patient",
                "3"
              ]
            },
            "description": "This returns a `token` that you can use to retrieve information later on.\n\nWe have included a test to confirm if a token is returned. We have also added test scripts to copy the token to the `token` collection variable. This makes it easy for us to reuse this token in other requests in the collection."
          },
          "response": []
        },
        {
          "name": "Update patient",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"An access token is returned\", () => {",
                  "    pm.expect(pm.response.json()).to.have.property('token')",
                  "    pm.expect(pm.response.json().token).to.be.a('string')",
                  "    // Set the collection-scope \"token\" variable to the token received from the API",
                  "    // This lets us use it in other requests",
                  "    pm.collectionVariables.set('token', pm.response.json().token)",
                  "})",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJkb2N0b3JOYW1lQHRlc3QuY29tIiwiaWF0IjoxNzI2MzkxMzU3LCJyb2xlcyI6WyJET0NUT1JfUk9MRSJdLCJleHAiOjE3MjY0Nzc3NTcsImFjdG9ySWQiOjJ9.fuHxdjuDy8jxxwYEcIji_Pn0WxLob3O4xfyfXCn3Law",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"objectType\": \"patient\",\n    \"id\": 3,\n    \"firstName\": \"PatientUpdated\",\n    \"lastName\": \"NameUpdated\",\n    \"email\": \"patientName@test.com\",\n    \"lastLoginDate\": \"2024-09-15T09:01:23Z\",\n    \"state\": \"DELETED\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/patient/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "patient",
                ""
              ]
            },
            "description": "This returns a `token` that you can use to retrieve information later on.\n\nWe have included a test to confirm if a token is returned. We have also added test scripts to copy the token to the `token` collection variable. This makes it easy for us to reuse this token in other requests in the collection."
          },
          "response": []
        },
        {
          "name": "Delete patient by id",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"An access token is returned\", () => {",
                  "    pm.expect(pm.response.json()).to.have.property('token')",
                  "    pm.expect(pm.response.json().token).to.be.a('string')",
                  "    // Set the collection-scope \"token\" variable to the token received from the API",
                  "    // This lets us use it in other requests",
                  "    pm.collectionVariables.set('token', pm.response.json().token)",
                  "})",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJkb2N0b3JOYW1lQHRlc3QuY29tIiwiaWF0IjoxNzI2MzkxMzU3LCJyb2xlcyI6WyJET0NUT1JfUk9MRSJdLCJleHAiOjE3MjY0Nzc3NTcsImFjdG9ySWQiOjJ9.fuHxdjuDy8jxxwYEcIji_Pn0WxLob3O4xfyfXCn3Law",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"firstName\":\"Patient\",\n    \"lastName\":\"Name\",\n    \"email\":\"patientName@test.com\",\n    \"password\":\"abc\",\n    \"objectType\":\"patient\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/patient/3",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "patient",
                "3"
              ]
            },
            "description": "This returns a `token` that you can use to retrieve information later on.\n\nWe have included a test to confirm if a token is returned. We have also added test scripts to copy the token to the `token` collection variable. This makes it easy for us to reuse this token in other requests in the collection."
          },
          "response": []
        },
        {
          "name": "Get page",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"An access token is returned\", () => {",
                  "    pm.expect(pm.response.json()).to.have.property('token')",
                  "    pm.expect(pm.response.json().token).to.be.a('string')",
                  "    // Set the collection-scope \"token\" variable to the token received from the API",
                  "    // This lets us use it in other requests",
                  "    pm.collectionVariables.set('token', pm.response.json().token)",
                  "})",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJkb2N0b3JOYW1lQHRlc3QuY29tIiwiaWF0IjoxNzI2MzkxMzU3LCJyb2xlcyI6WyJET0NUT1JfUk9MRSJdLCJleHAiOjE3MjY0Nzc3NTcsImFjdG9ySWQiOjJ9.fuHxdjuDy8jxxwYEcIji_Pn0WxLob3O4xfyfXCn3Law",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n        \"pageNumber\": 0,\n        \"pageSize\": 1,\n        \"sort\": {\n            \"empty\": true,\n            \"sorted\": false,\n            \"unsorted\": true\n        },\n        \"offset\": 0,\n        \"paged\": true,\n        \"unpaged\": false\n    }",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/patient/page?page=0&size=20",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "patient",
                "page"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "20"
                }
              ]
            },
            "description": "This returns a `token` that you can use to retrieve information later on.\n\nWe have included a test to confirm if a token is returned. We have also added test scripts to copy the token to the `token` collection variable. This makes it easy for us to reuse this token in other requests in the collection."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Doctor",
      "item": [
        {
          "name": "Register Doctor",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"An access token is returned\", () => {",
                  "    pm.expect(pm.response.json()).to.have.property('token')",
                  "    pm.expect(pm.response.json().token).to.be.a('string')",
                  "    // Set the collection-scope \"token\" variable to the token received from the API",
                  "    // This lets us use it in other requests",
                  "    pm.collectionVariables.set('token', pm.response.json().token)",
                  "})",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"firstName\":\"Doctor\",\n    \"lastName\":\"Name\",\n    \"email\":\"doctorName@test.com\",\n    \"password\":\"abc\",\n    \"objectType\":\"doctor\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/doctor/register",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "doctor",
                "register"
              ]
            },
            "description": "This returns a `token` that you can use to retrieve information later on.\n\nWe have included a test to confirm if a token is returned. We have also added test scripts to copy the token to the `token` collection variable. This makes it easy for us to reuse this token in other requests in the collection."
          },
          "response": []
        },
        {
          "name": "Get Doctor By Id",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"An access token is returned\", () => {",
                  "    pm.expect(pm.response.json()).to.have.property('token')",
                  "    pm.expect(pm.response.json().token).to.be.a('string')",
                  "    // Set the collection-scope \"token\" variable to the token received from the API",
                  "    // This lets us use it in other requests",
                  "    pm.collectionVariables.set('token', pm.response.json().token)",
                  "})",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJkb2N0b3JOYW1lQHRlc3QuY29tIiwiaWF0IjoxNzI2MzkxMzU3LCJyb2xlcyI6WyJET0NUT1JfUk9MRSJdLCJleHAiOjE3MjY0Nzc3NTcsImFjdG9ySWQiOjJ9.fuHxdjuDy8jxxwYEcIji_Pn0WxLob3O4xfyfXCn3Law",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"firstName\":\"Patient\",\n    \"lastName\":\"Name\",\n    \"email\":\"patientName@test.com\",\n    \"password\":\"abc\",\n    \"objectType\":\"patient\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/patient/3",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "patient",
                "3"
              ]
            },
            "description": "This returns a `token` that you can use to retrieve information later on.\n\nWe have included a test to confirm if a token is returned. We have also added test scripts to copy the token to the `token` collection variable. This makes it easy for us to reuse this token in other requests in the collection."
          },
          "response": []
        },
        {
          "name": "Update doctor",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"An access token is returned\", () => {",
                  "    pm.expect(pm.response.json()).to.have.property('token')",
                  "    pm.expect(pm.response.json().token).to.be.a('string')",
                  "    // Set the collection-scope \"token\" variable to the token received from the API",
                  "    // This lets us use it in other requests",
                  "    pm.collectionVariables.set('token', pm.response.json().token)",
                  "})",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJkb2N0b3JOYW1lQHRlc3QuY29tIiwiaWF0IjoxNzI2MzkxMzU3LCJyb2xlcyI6WyJET0NUT1JfUk9MRSJdLCJleHAiOjE3MjY0Nzc3NTcsImFjdG9ySWQiOjJ9.fuHxdjuDy8jxxwYEcIji_Pn0WxLob3O4xfyfXCn3Law",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"objectType\": \"doctor\",\n    \"id\": 1,\n    \"firstName\": \"admin1\",\n    \"lastName\": \"admin1\",\n    \"email\": \"admin@test.com\",\n    \"lastLoginDate\": \"2024-09-15T06:42:44Z\",\n    \"state\": \"ACTIVE\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/doctor/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "doctor",
                ""
              ]
            },
            "description": "This returns a `token` that you can use to retrieve information later on.\n\nWe have included a test to confirm if a token is returned. We have also added test scripts to copy the token to the `token` collection variable. This makes it easy for us to reuse this token in other requests in the collection."
          },
          "response": []
        },
        {
          "name": "Delete doctor by id",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"An access token is returned\", () => {",
                  "    pm.expect(pm.response.json()).to.have.property('token')",
                  "    pm.expect(pm.response.json().token).to.be.a('string')",
                  "    // Set the collection-scope \"token\" variable to the token received from the API",
                  "    // This lets us use it in other requests",
                  "    pm.collectionVariables.set('token', pm.response.json().token)",
                  "})",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJkb2N0b3JOYW1lQHRlc3QuY29tIiwiaWF0IjoxNzI2MzkxMzU3LCJyb2xlcyI6WyJET0NUT1JfUk9MRSJdLCJleHAiOjE3MjY0Nzc3NTcsImFjdG9ySWQiOjJ9.fuHxdjuDy8jxxwYEcIji_Pn0WxLob3O4xfyfXCn3Law",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"firstName\":\"Patient\",\n    \"lastName\":\"Name\",\n    \"email\":\"patientName@test.com\",\n    \"password\":\"abc\",\n    \"objectType\":\"patient\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/doctor/2",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "doctor",
                "2"
              ]
            },
            "description": "This returns a `token` that you can use to retrieve information later on.\n\nWe have included a test to confirm if a token is returned. We have also added test scripts to copy the token to the `token` collection variable. This makes it easy for us to reuse this token in other requests in the collection."
          },
          "response": []
        },
        {
          "name": "Get page",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"An access token is returned\", () => {",
                  "    pm.expect(pm.response.json()).to.have.property('token')",
                  "    pm.expect(pm.response.json().token).to.be.a('string')",
                  "    // Set the collection-scope \"token\" variable to the token received from the API",
                  "    // This lets us use it in other requests",
                  "    pm.collectionVariables.set('token', pm.response.json().token)",
                  "})",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJkb2N0b3JOYW1lQHRlc3QuY29tIiwiaWF0IjoxNzI2MzkxMzU3LCJyb2xlcyI6WyJET0NUT1JfUk9MRSJdLCJleHAiOjE3MjY0Nzc3NTcsImFjdG9ySWQiOjJ9.fuHxdjuDy8jxxwYEcIji_Pn0WxLob3O4xfyfXCn3Law",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n        \"pageNumber\": 0,\n        \"pageSize\": 1,\n        \"sort\": {\n            \"empty\": true,\n            \"sorted\": false,\n            \"unsorted\": true\n        },\n        \"offset\": 0,\n        \"paged\": true,\n        \"unpaged\": false\n    }",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/patient/page?page=0&size=20",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "patient",
                "page"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "20"
                }
              ]
            },
            "description": "This returns a `token` that you can use to retrieve information later on.\n\nWe have included a test to confirm if a token is returned. We have also added test scripts to copy the token to the `token` collection variable. This makes it easy for us to reuse this token in other requests in the collection."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Appointment",
      "item": [
        {
          "name": "Get by id",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbkB0ZXN0LmNvbSIsImlhdCI6MTcyNjM5NjYxNCwicm9sZXMiOlsiRE9DVE9SX1JPTEUiXSwiZXhwIjoxNzI2NDgzMDE0LCJhY3RvcklkIjoxfQ.Y2GuNWYQBrGnavnuJf6DN_jcitVVz-adVaMcVtd777Q",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/appointment/4",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "appointment",
                "4"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get active",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbkB0ZXN0LmNvbSIsImlhdCI6MTcyNjM5NzE3Mywicm9sZXMiOlsiRE9DVE9SX1JPTEUiXSwiZXhwIjoxNzI2NDgzNTczLCJhY3RvcklkIjoxfQ.WqHFyJ6d9vlI_X8N_nLHnakFmxFpCFTpQnaqa_ohyHo",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/appointment/active?page=0&size=20",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "appointment",
                "active"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "20"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete by id",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbkB0ZXN0LmNvbSIsImlhdCI6MTcyNjM5NzE3Mywicm9sZXMiOlsiRE9DVE9SX1JPTEUiXSwiZXhwIjoxNzI2NDgzNTczLCJhY3RvcklkIjoxfQ.WqHFyJ6d9vlI_X8N_nLHnakFmxFpCFTpQnaqa_ohyHo",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/appointment/active?page=0&size=20",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "appointment",
                "active"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "20"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create appointment",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbkB0ZXN0LmNvbSIsImlhdCI6MTcyNjM5NjE2NCwicm9sZXMiOlsiRE9DVE9SX1JPTEUiXSwiZXhwIjoxNzI2NDgyNTY0LCJhY3RvcklkIjoxfQ.B8Qquh3DED8RlznnkDO9kZDo3RiUEG_5iSub8Cu06M0",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"medicalExams\": [\n        {\n            \"examType\": {\n                \"id\": 1\n            },\n            \"result\": \"NEGATIVE\"\n        },\n        {\n            \"examType\": {\n                \"id\": 2\n            },\n            \"result\": \"POSITIVE\",\n            \"date\": \"2024-09-15T16:28:57\"\n        }\n    ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/appointment?patientId=2",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "appointment"
              ],
              "query": [
                {
                  "key": "patientId",
                  "value": "2"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update appointment",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbkB0ZXN0LmNvbSIsImlhdCI6MTcyNjM5NjYxNCwicm9sZXMiOlsiRE9DVE9SX1JPTEUiXSwiZXhwIjoxNzI2NDgzMDE0LCJhY3RvcklkIjoxfQ.Y2GuNWYQBrGnavnuJf6DN_jcitVVz-adVaMcVtd777Q",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"id\": 5,\n    \"state\": \"CLOSED\",\n    \"medicalExams\": [\n        {\n            \"id\": 3,\n            \"examType\": {\n                \"id\": 1\n            },\n            \"result\": \"POSITIVE\"\n        },\n        {\n            \"id\": 4,\n            \"examType\": {\n                \"id\": 2\n            },\n            \"date\": \"2024-10-15T16:28:57\",\n            \"result\": \"POSITIVE\"\n        }\n    ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/appointment",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "appointment"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Clinic",
      "item": [
        {
          "name": "Get clinic by id",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJkb2N0b3JOYW1lQHRlc3QuY29tIiwiaWF0IjoxNzI2MzkxMzU3LCJyb2xlcyI6WyJET0NUT1JfUk9MRSJdLCJleHAiOjE3MjY0Nzc3NTcsImFjdG9ySWQiOjJ9.fuHxdjuDy8jxxwYEcIji_Pn0WxLob3O4xfyfXCn3Law",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/clinic/1",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "clinic",
                "1"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update clinic",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJkb2N0b3JOYW1lQHRlc3QuY29tIiwiaWF0IjoxNzI2MzkxMzU3LCJyb2xlcyI6WyJET0NUT1JfUk9MRSJdLCJleHAiOjE3MjY0Nzc3NTcsImFjdG9ySWQiOjJ9.fuHxdjuDy8jxxwYEcIji_Pn0WxLob3O4xfyfXCn3Law",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"createdBy\": \"system\",\n    \"createdDate\": \"2024-09-13T12:42:12Z\",\n    \"lastModifiedBy\": \"system\",\n    \"lastModifiedDate\": \"2024-09-13T12:42:12Z\",\n    \"id\": 1,\n    \"name\": \"Test clinic1\",\n    \"address\": {\n        \"addressLine1\": \"First street1\",\n        \"addressLine2\": \"3\",\n        \"city\": \"New York\",\n        \"state\": \"NY\",\n        \"zip\": \"123123\"\n    },\n    \"phone\": \"+1111111111\",\n    \"email\": \"testclinic@test.com\",\n    \"logo\": \"\",\n    \"schedule\": [\n        {\n            \"day\": \"MONDAY\",\n            \"startTime\": \"9:00\",\n            \"endTime\": \"20:00\",\n            \"dayOff\": false\n        },\n        {\n            \"day\": \"TUESDAY\",\n            \"startTime\": \"9:00\",\n            \"endTime\": \"20:00\",\n            \"dayOff\": false\n        },\n        {\n            \"day\": \"WEDNESDAY\",\n            \"startTime\": \"9:00\",\n            \"endTime\": \"20:00\",\n            \"dayOff\": false\n        },\n        {\n            \"day\": \"THURSDAY\",\n            \"startTime\": \"9:00\",\n            \"endTime\": \"20:00\",\n            \"dayOff\": false\n        },\n        {\n            \"day\": \"FRIDAY\",\n            \"startTime\": \"9:00\",\n            \"endTime\": \"20:00\",\n            \"dayOff\": false\n        },\n        {\n            \"day\": \"SATURDAY\",\n            \"startTime\": \"9:00\",\n            \"endTime\": \"20:00\",\n            \"dayOff\": false\n        },\n        {\n            \"day\": \"SUNDAY\",\n            \"startTime\": \"9:00\",\n            \"endTime\": \"20:00\",\n            \"dayOff\": false\n        }\n    ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/clinic/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "clinic",
                ""
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Exams",
      "item": [
        {
          "name": "Generate patient exams pdf",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJwYXRpZW50TmFtZUB0ZXN0LmNvbSIsImlhdCI6MTcyNjM5NzUzMiwicm9sZXMiOlsiUEFUSUVOVF9ST0xFIl0sImV4cCI6MTcyNjQ4MzkzMiwiYWN0b3JJZCI6Mn0.nwpQOqXcOqlN2zGEZZ5efT9BDB_wSbd85-5On5lhoZo",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/medical-exam/exams-list-pdf?patientId=2",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "medical-exam",
                "exams-list-pdf"
              ],
              "query": [
                {
                  "key": "patientId",
                  "value": "2"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get exams list",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJwYXRpZW50TmFtZUB0ZXN0LmNvbSIsImlhdCI6MTcyNjM5NzUzMiwicm9sZXMiOlsiUEFUSUVOVF9ST0xFIl0sImV4cCI6MTcyNjQ4MzkzMiwiYWN0b3JJZCI6Mn0.nwpQOqXcOqlN2zGEZZ5efT9BDB_wSbd85-5On5lhoZo",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/medical-exam/exams-list?patientId=2",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "medical-exam",
                "exams-list"
              ],
              "query": [
                {
                  "key": "patientId",
                  "value": "2"
                }
              ]
            }
          },
          "response": []
        }
      ]
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbkB0ZXN0LmNvbSIsImlhdCI6MTcyNjM4MjU2Mywicm9sZXMiOlsiRE9DVE9SX1JPTEUiXSwiZXhwIjoxNzI2NDY4OTYzLCJhY3RvcklkIjoxfQ.drk7I9yckIy9a3cLJ1z-tm61J3YhMWXeM7hbSgNuOBc",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "token",
      "value": ""
    },
    {
      "key": "baseUrl",
      "value": "http://localhost:8761"
    }
  ]
}